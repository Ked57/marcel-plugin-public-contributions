{"version":3,"sources":["main.js"],"names":["MarcelPluginPublicContributions","root","document","getElementById","Marcel","Plugin","i","props","backend_url","body_bg_color","body_txt_color","body_font","row_border_color","first_txt_color","stylesvar","body","style","backgroundColor","color","fontFamily","rowElements","querySelectorAll","length","elements","borderTop","firstElements","fetch","method","headers","response","ok","console","error","json","Object","data","usableData","keys","key","push","first","shift","template","avatarUrl","name","count","map","row","join","innerHTML","init"],"mappings":"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","file":"main.89f6802c.js","sourceRoot":"src","sourcesContent":["class MarcelPluginPublicContributions extends Marcel.Plugin {\n  constructor() {\n    super();\n    this.root = document.getElementById(\"root\");\n  }\n\n  async render() {\n    const {\n      backend_url,\n      body_bg_color,\n      body_txt_color,\n      body_font,\n      row_border_color,\n      first_txt_color,\n      stylesvar = {}\n    } = this.props;\n\n    document.body.style.backgroundColor = body_bg_color;\n    document.body.style.color = body_txt_color;\n    document.body.style.fontFamily = body_font;\n    const rowElements = document.querySelectorAll(\".row\");\n    for (let i = 0; i < rowElements.length; i++) {\n      elements[i].style.borderTop = `1px solid ${row_border_color}`;\n    }\n    const firstElements = document.querySelectorAll(\".first\");\n    for (let i = 0; i < firstElements.length; i++) {\n      elements[i].style.color = first_txt_color;\n    }\n\n    const response = await fetch(backend_url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response || !response.ok) {\n      console.error(\"no response from server\");\n      return;\n    }\n    const data = await response.json();\n    const usableData = [];\n    for (key of Object.keys(data)) {\n      usableData.push(data[key]);\n    }\n    const first = usableData.shift();\n    const template = `\n    <div class=\"container\">\n      <div class=\"header\">\n        Public contributions at Zenika this month\n      </div>\n      <div class=\"info-container\">\n        ${`<div class=\"row first\">\n        <div class=\"row-item\"><img class=\"thumbnail\" src=${first.avatarUrl}></div>\n        <div class=\"row-item\">${first.name}</div>\n        <div class=\"row-item\">${first.count}</div>\n      </div>`}\n        ${usableData\n          .map(\n            row =>\n              `<div class=\"row\">\n              <div class=\"row-item\"><img class=\"thumbnail\" src=${row.avatarUrl}></div>\n              <div class=\"row-item\">${row.name}</div>\n              <div class=\"row-item\">${row.count}</div>\n            </div>`\n          )\n          .join(\"\")}\n      </div>\n    </div>`;\n    this.root.innerHTML = template;\n\n    // stylesvar is a special property containing the global media theme.\n    // You should use it to have a consistent style accross all the media.\n    if (stylesvar[\"primary-color\"])\n      this.root.style.color = stylesvar[\"primary-color\"];\n    if (stylesvar[\"font-family\"])\n      this.root.style.fontFamily = stylesvar[\"font-family\"];\n  }\n}\n\nMarcel.init(MarcelPluginPublicContributions);\n\n// uncomment this line to try the plugin in a browser :\n// Marcel.changeProps({\n//   backend_url: \"http://localhost:8080\",\n//   body_bg_color: \"#f2f2f2\",\n//   body_txt_color: \"#4c4c4c\",\n//   body_font: \"Helvetica, Arial, sans-serif\",\n//   row_border_color: \"#d2d6d8\",\n//   first_txt_color: \"#b51432\"\n// });\n"]}